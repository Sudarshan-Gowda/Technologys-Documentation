1. Start a new repository and publish it to GitHub:
--------------------------------------------------
Create empty repo in public git and follow the steps

# create a new directory, and initialize it with git-specific functions
git init my-repo

# change into the `my-repo` directory
cd my-repo

# create the first file in the project
echo "# Second-Project" >> README.md

# git isn't aware of the file, stage it
git add README.md

# take a snapshot of the staging area
git commit -m "first commit"

# provide the path for the repository you created on github
git remote add origin https://github.com/sudhu-gowda/My-Repo.git

# push changes to github
git push -u origin master  
#git push --set-upstream origin master

================================================

2. Contribute to an existing repository:
---------------------------------------

# download a repository on GitHub.com to our machine
git clone https://github.com/me/repo.git

# change into the `repo` directory
cd repo

# create a new branch to store any new changes
git branch my-branch

# switch to that branch (line of development)
git checkout my-branch

# make changes, for example, edit `file1.md` and `file2.md` using the text editor

# stage the changed files
git add file1.md file2.md

# take a snapshot of the staging area (anything that's been added)
git commit -m "my snapshot"

# push changes to github
git push --set-upstream origin my-branch

===================================================

3. Contribute to an existing branch on GitHub

# assumption: a project called `repo` already exists on the machine, and a new branch has been pushed to GitHub.com since the last time changes were made locally

# change into the `repo` directory
cd repo

# update all remote tracking branches, and the currently checked out branch
git pull

# change into the existing branch called `feature-a`
git checkout feature-a

# make changes, for example, edit `file1.md` using the text editor

# stage the changed file
git add file1.md

# take a snapshot of the staging area
git commit -m "edit file1"

# push changes to github
git push

================================================

Other Usefull Commands:
----------------------
# to create branch & check out
git branch branchName
git checkout branchName
#or
git checkout -b branchName

# to check the current working branch 
git branch --> this will be indicated asteric mark with dark color

# to switch between branch
git checkout branchName

# to merge current working branch with master branch:
git merge master

# Merge a branch into a target branch
git merge [source branch] [target branch]

# to pull the data to master from server
# Update local repository to the newest commit
git pull

# Clone a remote branch and switch to it
git checkout -b [branch name] origin/[branch name]

# Rename a local branch
git branch -m [old branch name] [new branch name]

#Switch to the branch last checked out
git checkout -

# Discard changes to a file
git checkout -- [file-name.txt]


------------------------------
# Push a branch to your remote repository
git push origin [branch name]

# Push changes to remote repository (and remember the branch)	
git push -u origin [branch name]

# Delete a remote branch
git push origin --delete [branch name]

# Update local repository to the newest commit
git pull

# Pull changes from remote repository
git pull origin [branch name]

#Add a remote repository
git remote add origin ssh://git@github.com/[username]/[repository-name].git

#Set a repository's origin branch to SSH
git remote set-url origin ssh://git@github.com/[username]/[repository-name].git

-------------------------------------

##Inspection & Comparison ##

#View changes
git log

#View changes (detailed)
git log --summary

#View changes (briefly)
git log --oneline

#Preview changes before merging
git diff [source branch] [target branch]	

-----------------------------------

